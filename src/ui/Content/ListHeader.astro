<list-header></list-header>

<script type='module'>
  import { formatTime, convertToSeconds } from './modules/formatTime.js';
  import { convertInValidSlug } from './modules/generalUtils.js';
  import {
    getTheTheArrayAlreadyConvertedFromLS,
    deletePlaylistFromLs
  } from './modules/localStorage.js';

  class ListHeader extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });

      this.currentIndex = 0;

      setTimeout(() => {
        const sidebarPlaylist = document.querySelector('.sidebarPlaylist');
        const activeTabElement = document.querySelector(
          '.playlist-item.playlist-item-active'
        );
        const index = [...sidebarPlaylist.children].indexOf(activeTabElement);
        this.currentIndex = index;
        activeTabElement?.scrollIntoView({ behavior: 'smooth' });
      }, 500);
    }

    static get styles() {
      return /* css */ `
        :host {
          mix-blend-mode: normal;
          z-index: 5;
        }

        .texting-strong {
          font-size: 1.5vmax;

          @media (width <= 1111px) and (orientation: portrait) {
            font-size: 1.1vmax;
          }
        }

        .container-anchors {
          position: absolute;
          top: 1.5vmax;
          right: 1.5vmax;
          display: flex;
          gap: 0.5vmax;
          visibility: hidden;
          pointer-events:none;
          
          
          button {
            width: 2.5vmax;
            height: 2.5vmax;
            border: none;
            outline: none;
            margin: 0;
            padding: 0;
            border-radius: 50%;
            display: flex;
            flex-wrap: wrap;
            place-content: center;
            text-align: center;
            cursor: pointer;
            background: color-mix(in srgb, var(--theme-color) 50%, black 30%);
            backdrop-filter: blur(0.2vmax);
            transition: opacity .3s ease;
            aspect-ratio: 1;


            &.profile {
              animation: none;
              overflow: hidden;
              transition: transform 0.5s ease, box-shadow 0.2s ease;
              will-change: transform, filter;
              z-index: 10;
              touch-action: none;
              isolation: isolate;
              width: 100%;
              position: relative;
              visibility: hidden;
            }

            &:active {
              opacity: 0.5;
            }

            img {
              pointer-events: none;
              --s-image: 1.9vmax;
              width: var(--s-image);
              height: var(--s-image);
            }
          }
        }

        .menu-tooltip {
          --toggle-color: #fff;
          --item-1-gradient: linear-gradient(45deg, #62daca, #10d4a9);
          --item-2-gradient: linear-gradient(45deg, #f97d98, #d41f46);
          --item-3-gradient: linear-gradient(45deg, aliceblue, #d169d1);
          width: 13.02vmax;
          height: 13.02vmax;
          position: absolute;
          right: -3vmax;
          bottom: -3vmax;
          display: flex;
          justify-content: center;
          align-items: center;
          font-size: 1vmax;
          -webkit-tap-highlight-color: transparent;
          user-select: none;
          overflow: hidden;
          zoom: 0.8;

          &.esconder-delete-playlist {
            .circle-box {
               &:nth-of-type(3) {
                display: none;
               }
            }
          }

          &.menu-invisible {
            display: none;
            pointer-events:none;
          }

          .toggle {
            width: 3.91vmax;
            height: 3.91vmax;
            line-height: 3.91vmax;
            font-size: 1.5vmax;
            text-align: center;
            border-radius: 50%;
            z-index: 999;
            position: absolute;
            cursor: pointer;
            box-shadow: inset 0.25vmax 0.25vmax 0.25vmax #0003, inset -0.25vmax -0.25vmax 0.375vmax #fff7, 0.375vmax 0.625vmax 0.5vmax #0001, 0.5vmax 0.375vmax 0.625vmax #0001;
            display: flex;
            flex-wrap: wrap;
            place-content: center;

            svg {
              transition: transform 1s ease-in-out;
              width: 58%;
              height: 58%;
              color: var(--theme-color);
            }

            &::before {
              top: 18%;
              left: 15%;
              --size: 1vmax;
            }

            &::after {
              top: 10%;
              left: 30%;
              --size: 0.65vmax;
            }

            &::before, &::after {
              position: absolute;
              content: '';
              background-color: #fff;
              border-radius: inherit;
              transform: scale(0.5);
              transition: transform 0.4s ease;
              width: var(--size);
              height: var(--size);
              opacity: 0.3;
            }
            
          }

          #toggle {
            appearance: none;
            visibility: hidden;
            
            &:checked + .toggle svg {
              transform: rotate(315deg);
            }

            &:checked ~ .circle-box {
              transform: rotate(calc(360deg / 8 * var(--i)));
              opacity: 1;
            }
          }

          .circle-box {
            position: absolute;
            left: 0;
            list-style-type: none;
            padding: 0;
            transition: transform 0.5s ease, opacity .5s ease 0.2s;
            transform-origin: 6.51vmax;
            transition-delay: calc(0.1s * var(--i));
            transform: rotate(0deg) translateX(4.56vmax);
            opacity: 0;
            display: flex;


            &:nth-of-type(1) .anchor  {
              box-shadow: inset 0.25vmax 0.25vmax 0.25vmax #0003, inset -0.25vmax -0.25vmax 0.375vmax #fff7, 0.375vmax 0.625vmax 0.5vmax #0001, 0.5vmax 0.375vmax 0.625vmax #0001;

              &:hover {
                svg {
                  filter: brightness(150%);
                }
              }
            }

            &:nth-of-type(2) .anchor  {
              box-shadow: inset 0.25vmax 0.25vmax 0.25vmax #0003, inset -0.25vmax -0.25vmax 0.375vmax #fff7, 0.375vmax 0.625vmax 0.5vmax #0001, 0.5vmax 0.375vmax 0.625vmax #0001;

              &:hover {
                svg {
                  filter: brightness(150%);
                }
              }
            }

            &:nth-of-type(3) .anchor  {
              box-shadow: inset 0.25vmax 0.25vmax 0.25vmax #0003, inset -0.25vmax -0.25vmax 0.375vmax #fff7, 0.375vmax 0.625vmax 0.5vmax #0001, 0.5vmax 0.375vmax 0.625vmax #0001;

              &:hover {
                svg {
                  filter: brightness(150%);
                }
              }
            }

            &:nth-of-type(4),
            &:nth-of-type(5),
            &:nth-of-type(6),
            &:nth-of-type(7) {
              visibility: hidden;
            }

            .anchor {
              width: 3.26vmax;
              height: 3.26vmax;
              font-size: 1.3vmax;
              line-height: 3.26vmax;
              border-radius: 50%;
              text-decoration: none;
              transform: rotate(calc(360deg / -8 * var(--i)));
              display: flex;
              flex-wrap: wrap;
              place-content: center;
              border: none;
              outline:none;
              aspect-ratio: 1;
              background-color: transparent;
              padding: 0 !important;

              svg {
                width: 58%;
                height: 58%;
                color: var(--theme-color);
                transition: filter .4s ease;
                display: flex;
              }
            }
          }
        }


        header {
          display: flex;
          flex-direction: column;
          padding: 0.5vmax;
          position: relative;
          overflow: hidden;
          
          & .data {
            display: flex;
            gap: 0 1.2vmax;
            padding: 1.3vmax;

            .container-cover {
              --size: 11.5vmax;
              position: relative;
              overflow: hidden;
              width: var(--size);
              height: var(--size);
              aspect-ratio: 1;
              outline: 0.15vmax var(--theme-color) solid;

              @media (width <= 1111px) and (orientation: portrait) {
                --size: 10vmax;
              }

              * {
                pointer-events: none;
              }

                &::before {
                  content: "";
                  background: url('/assets/album-cover.avif');
                  width: var(--size);
                  height: var(--size);
                  background-size: var(--size);
                  top: 0;
                  left: 0;
                  background-position: center;
                  mix-blend-mode: screen;
                  opacity: 55%;
                  z-index: 2;
                  position: absolute;
                  pointer-events: none;
                }

              &::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index:3;
                background-image:  radial-gradient(
                  circle 8vmax at var(--x) var(--y),
                  #fff1 40%,
                  transparent 75%
                );
                background-blend-mode: overlay;
                filter: contrast(1.1) brightness(1.5) saturate(1.1);
              }
            }

            .cover {
              width: var(--size);
              height: var(--size);
              background-color: #fff1;
              position: absolute;
              aspect-ratio: 1;
            }

            & .avatar {
              --size: 1.2vmax;
              width: var(--size);
              height: var(--size);
              background-image: url("/assets/favicon.webp");
              background-size: contain;
              border-radius: 50%;
            }

            .esconder {
              @media (width <= 1111px) and (orientation: portrait) {
                display: none;
              }
            }

            & .info {
              display: flex;
              flex-direction: column;
              justify-content: end;
              font-family: var(--default-font);

              & .row {
                display: grid;
                grid-auto-flow: column;
                justify-content: start;
                gap: 0.5vmax;
                align-items: center;
              }

              & h1 {
                margin: 0;
                font-weight: 800;
                letter-spacing: -0.1vmax;
                font-size: 3.5vmax;

                  @media (width <= 1111px) and (orientation: portrait) {
                    font-size: 2vmax;
                    overflow-wrap: anywhere;
                  }
              }

              & .total-duration {
                color: var(--dark-textcolor);

                @media (width <= 1111px) {
                  filter: brightness(200%);
                }
              }

              .info-subtitle,
              .total-duration {
                font-size: 0.95vmax;
              }
            }
          }
        }
      `;
    }

    setData(title, songs) {
      const slug = convertInValidSlug(title);
      const total = songs.length;
      const duration = songs
        .map(song => convertToSeconds(song.duration))
        .reduce((first, acc) => first + acc, 0);
      let [min] = formatTime(duration).split(':');
      if (min === '00') min = '0';
      const time = `${min} min `;

      this.shadowRoot.querySelector('h1').textContent = title;
      this.shadowRoot.querySelector('.info-subtitle').textContent =
        `PlaylistHub · ${total} songs,`;
      this.shadowRoot.querySelector('.total-duration').textContent =
        `${time} of duration approximately`;

      setTimeout(() => {
        const result = `.playlist-item[data-id="${slug}"] img`;
        this.shadowRoot.querySelector('img.cover').src =
          document.querySelector(result)?.src;
      }, 300);
    }

    addCoverMouseAnimation() {
      const containerCover = this.shadowRoot.querySelector('.container-cover');

      function handleMover(e) {
        e.preventDefault();

        let clientX, clientY;

        if (e.type === 'touchmove') {
          clientX = e.touches[0].clientX;
          clientY = e.touches[0].clientY;
        } else {
          clientX = e.clientX;
          clientY = e.clientY;
        }

        const { left, top } = containerCover.getBoundingClientRect();
        const x = clientX - left;
        const y = clientY - top;

        containerCover.style.setProperty('--x', `${x}px`);
        containerCover.style.setProperty('--y', `${y}px`);
      }

      containerCover.addEventListener('pointermove', handleMover);
      containerCover.addEventListener('touchmove', handleMover, {
        passive: false
      });
    }

    connectedCallback() {
      this.render();
      this.addCoverMouseAnimation();
      this.listenersMenuTooltipFromUser();
      const prev = this.shadowRoot.querySelector('.prev-list');
      const next = this.shadowRoot.querySelector('.next-list');
      let playlistItems = document.querySelectorAll('.playlist-item');
      const $tabRight = document.querySelector('.sidebar-right.sidb');
      const $tabLeft = document.querySelector('.sidebar-left.sidb');
      let slugs = [...playlistItems].map(playlist => playlist.dataset.id);
      let globalPlaylistLength = [...playlistItems].filter(
        playlist => playlist.getAttribute('data-from-user') === 'FALSE'
      ).length;

      let { length } = playlistItems;
      const sidebarPlaylist = document.querySelector('.sidebarPlaylist');

      setTimeout(() => {
        let playlistItems = document.querySelectorAll('.playlist-item');
        length = playlistItems.length;
      }, 500);

      function clickOnPlaylist(targetIndex) {
        const slug = slugs[targetIndex];
        const theTarget = document.querySelector(
          `.playlist-item[data-id="${slug}"]`
        );
        theTarget.click();
        theTarget.focus();
      }

      function goToTargetPlaylist(index) {
        setTimeout(() => {
          const sidebarPlaylist = document.querySelector('.sidebarPlaylist');
          let playlistItems = document.querySelectorAll('.playlist-item');
          length = playlistItems.length;
          [...sidebarPlaylist.children][index].scrollIntoView({
            behavior: 'smooth'
          });
        }, 7);
      }

      const input = document.getElementById('search-input');

      document.addEventListener('keydown', ({ key }) => {
        const inputHasFocus = document.activeElement === input;
        const sidebarPlaylist = document.querySelector('.sidebarPlaylist');
        const clickEnter = inputHasFocus && key === 'Enter';
        const clickArrowDown = inputHasFocus && key === 'ArrowDown';
        const selecttFirsPlaylist = () => {
          const firstPlaylist = sidebarPlaylist.firstElementChild;
          if (firstPlaylist) {
            firstPlaylist.click();
            firstPlaylist.focus();
            this.currentIndex = 0;
            playlistItems = document.querySelectorAll('.playlist-item');
            slugs = [...playlistItems].map(playlist => playlist.dataset.id);
          }
        };

        if (clickEnter) {
          selecttFirsPlaylist();
        }

        if (clickArrowDown) {
          setTimeout(() => {
            selecttFirsPlaylist();
          }, 1);
        }
      });

      prev?.addEventListener('click', () => {
        const prevIndex = (this.currentIndex - 1 + length) % length;
        clickOnPlaylist(prevIndex);
        this.currentIndex = prevIndex;

        goToTargetPlaylist(prevIndex);

        if (prevIndex === length - 1) {
          $tabRight.click();

          setTimeout(() => {
            sidebarPlaylist.lastElementChild.click();
            sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
          }, 5);
          return;
        }

        if (prevIndex === globalPlaylistLength - 1) {
          $tabLeft.click();

          setTimeout(() => {
            sidebarPlaylist.children[globalPlaylistLength - 1].click();
            sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
          }, 5);
          return;
        }
      });

      next?.addEventListener('click', () => {
        const nextIndex = (this.currentIndex + 1) % length;
        clickOnPlaylist(nextIndex);
        this.currentIndex = nextIndex;

        goToTargetPlaylist(nextIndex);

        if (this.currentIndex === globalPlaylistLength) {
          $tabRight.click();

          setTimeout(() => {
            document
              .querySelector(
                'aside.playlist-item.visible[data-id="favorite-brands"][data-from-user="TRUE"]'
              )
              ?.click();
          }, 5);
          return;
        }

        if (nextIndex === 0) {
          setTimeout(() => {
            sidebarPlaylist.scrollTop = 10;
            $tabLeft.click();
            sidebarPlaylist.firstElementChild.click();
          }, 3);
        }
      });

      document.addEventListener('click', e => {
        if (e.target.matches('.playlist-item')) {
          e.target.focus();
          playlistItems = document.querySelectorAll('.playlist-item');
          slugs = [...playlistItems].map(playlist => playlist.dataset.id);
          let index = [...playlistItems].indexOf(e.target);
          this.currentIndex = index;
        }
      });

      function existCoverCard() {
        return document.querySelector('cover-card');
      }

      document.addEventListener('keydown', ({ key }) => {
        if (key === 'ArrowRight') {
          if (existCoverCard()) {
            const nextSongButton = document.querySelector('button.next');
            nextSongButton.click();
            return;
          }
          const nextIndex = (this.currentIndex + 1) % length;
          clickOnPlaylist(nextIndex);
          this.currentIndex = nextIndex;

          goToTargetPlaylist(nextIndex);

          if (this.currentIndex === globalPlaylistLength) {
            $tabRight.click();

            setTimeout(() => {
              document
                .querySelector(
                  'aside.playlist-item.visible[data-id="favorite-brands"][data-from-user="TRUE"]'
                )
                ?.click();
            }, 5);
            return;
          }

          if (nextIndex === 0) {
            setTimeout(() => {
              sidebarPlaylist.scrollTop = 10;
              $tabLeft.click();
              sidebarPlaylist.firstElementChild.click();
            }, 3);
          }
        } else if (key === 'ArrowLeft') {
          if (existCoverCard()) {
            const prevSongButton = document.querySelector('button.prev');
            prevSongButton.click();
            return;
          }
          const prevIndex = (this.currentIndex - 1 + length) % length;
          clickOnPlaylist(prevIndex);
          this.currentIndex = prevIndex;

          goToTargetPlaylist(prevIndex);

          if (prevIndex === length - 1) {
            $tabRight.click();

            setTimeout(() => {
              sidebarPlaylist.lastElementChild.click();
              sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
            }, 5);
            return;
          }

          if (prevIndex === globalPlaylistLength - 1) {
            $tabLeft.click();

            setTimeout(() => {
              sidebarPlaylist.children[globalPlaylistLength - 1].click();
              sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
            }, 5);
            return;
          }
        }

        if (key === 'ArrowDown') {
          if (existCoverCard()) return;
          if (document.activeElement.classList.contains('playlist-item')) {
            const nextIndex = (this.currentIndex + 1) % length;
            clickOnPlaylist(nextIndex);
            this.currentIndex = nextIndex;
            sidebarPlaylist.scrollTop += 50;

            goToTargetPlaylist(nextIndex);

            if (this.currentIndex === globalPlaylistLength) {
              $tabRight.click();

              setTimeout(() => {
                document
                  ?.querySelector(
                    'aside.playlist-item.visible[data-id="favorite-brands"][data-from-user="TRUE"]'
                  )
                  .click();
              }, 5);
              return;
            }

            if (nextIndex === 0) {
              setTimeout(() => {
                sidebarPlaylist.scrollTop = 10;
                $tabLeft.click();
                sidebarPlaylist.firstElementChild.click();
              }, 3);
            }
          }
        } else if (key === 'ArrowUp') {
          if (existCoverCard()) return;
          if (document.activeElement.classList.contains('playlist-item')) {
            const prevIndex = (this.currentIndex - 1 + length) % length;
            clickOnPlaylist(prevIndex);
            this.currentIndex = prevIndex;

            goToTargetPlaylist(prevIndex);

            if (prevIndex === length - 1) {
              $tabRight.click();

              setTimeout(() => {
                sidebarPlaylist.lastElementChild.click();
                sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
              }, 5);
              return;
            }

            if (prevIndex === globalPlaylistLength - 1) {
              $tabLeft.click();

              setTimeout(() => {
                sidebarPlaylist.children[globalPlaylistLength - 1].click();
                sidebarPlaylist.scrollTop = sidebarPlaylist.scrollHeight;
              }, 5);
              return;
            }
          }
        }
      });
    }

    listenersMenuTooltipFromUser() {
      //Delete Playlist
      const $ = el => this.shadowRoot?.querySelector(el);
      const header = $('.the-superheader');
      header.addEventListener('click', e => {
        e.stopPropagation();
        if (
          e.target.matches('.circle-box-delete-playlist-of-the-user') ||
          e.target.matches('.circle-box-delete-playlist-of-the-user *')
        ) {
          const deletePlaylist = window.confirm(
            'Are you sure to delete this playlist?'
          );

          if (deletePlaylist) {
            const titleOfThePlaylist = $('.texting-h1').textContent;
            const arrayOfAllPlaylistFromUser =
              getTheTheArrayAlreadyConvertedFromLS('allPlaylistFromDB');
            const playlistToDelete = arrayOfAllPlaylistFromUser.find(
              el => el.title === titleOfThePlaylist
            );
            const { id_playlist, id_user } = playlistToDelete;

            localStorage.setItem(
              'playlistToDelete',
              JSON.stringify({
                id_playlist,
                id_user
              })
            );

            //Llamo a mi action
            const servilleta4 = document.querySelector('.servilleta4');
            servilleta4?.click();

            // Elimino del arrayOfAllPlaylistFromUser esa playlist
            const newAllPlaylistFromTheUser = arrayOfAllPlaylistFromUser.filter(
              el =>
                el.title !== titleOfThePlaylist || el.id_playlist !== id_playlist
            );
            console.log(newAllPlaylistFromTheUser);
            localStorage.setItem(
              'allPlaylistFromDB',
              JSON.stringify(newAllPlaylistFromTheUser)
            );

            //Eliminar del localStorage esa Playlist
            const slug = convertInValidSlug(titleOfThePlaylist);
            deletePlaylistFromLs(slug);

            //Elimino el playlist-visible
            const playlistItemActive = document.querySelector(
              '.playlist-item.visible.playlist-item-active'
            );
            playlistItemActive.remove();
            //Hago click en el tab Right
            const tabRight = document.querySelector('.sidebar-right.sidb');
            tabRight?.click();
          }

          $('.menu-tooltip-user .toggle')?.click();
        }
      });
    }

    render() {
      this.shadowRoot.innerHTML = /* html */ `
        <style>${ListHeader.styles}</style>
        <header class="the-superheader">
          <div class="data">
            <article class="container-cover">
              <img draggable="false" class="cover" src="/assets/transparent.png" alt="cover" />
            </article>
            <div class="info">
              <strong class="texting-strong">Playlist</strong>
              <h1 class="texting-h1">Loading</h1>
              <div class="row">
                <div class="avatar esconder"></div>
                <span class="info-subtitle esconder">PlaylistHub · 20 canciones,</span>
                <span class="total-duration">80 min de duración aproximadamente</span>
              </div>
            </div>
          </div>
          <aside class="container-anchors">
            <button class='prev-list' >
              <img src='/assets/prev.svg' alt='prev' />
            </button>
            <button class='profile' style="--bg: url('/assets/v1.gif')">
              <img src='/assets/profile1.png' alt='profile' />
            </button>
            <button class='next-list' >
              <img src='/assets/next.svg' alt='next' />
            </button>
          </aside>

          <aside class="menu-tooltip menu-tooltip-user menu-invisible">
              <input type="checkbox" id="toggle" />
              <label for="toggle" class="toggle" title="Config">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><!-- Icon from Huge Icons by Hugeicons - undefined --><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" color="currentColor"><path d="M2.256 15.632c.034-.323.268-.583.736-1.104l1.031-1.153c.252-.32.431-.875.431-1.375s-.179-1.056-.43-1.375L2.991 9.472c-.468-.52-.702-.781-.736-1.104s.14-.627.49-1.234l.494-.857c.373-.648.56-.972.878-1.1c.317-.13.676-.028 1.395.176l1.22.343c.459.106.94.046 1.358-.169l.337-.194a2 2 0 0 0 .788-.968l.334-.997c.22-.66.33-.99.591-1.18C10.403 2 10.75 2 11.444 2h1.115c.694 0 1.042 0 1.303.189s.371.519.59 1.179l.335.997a2 2 0 0 0 .788.968l.337.194c.418.215.9.275 1.358.17l1.22-.344c.719-.204 1.078-.306 1.395-.177c.318.13.505.453.878 1.101l.493.857c.35.607.525.91.491 1.234s-.268.583-.736 1.104l-1.031 1.153c-.252.319-.431.875-.431 1.375s.179 1.056.43 1.375l1.032 1.153c.468.52.702.781.736 1.104s-.14.627-.49 1.234l-.494.857c-.373.648-.56.972-.878 1.1c-.317.13-.676.028-1.395-.176l-1.22-.343a2 2 0 0 0-1.359.169l-.336.194c-.36.23-.636.57-.788.968l-.334.997c-.22.66-.33.99-.591 1.18c-.261.188-.609.188-1.303.188h-1.115c-.694 0-1.041 0-1.303-.189c-.261-.189-.371-.518-.59-1.178"/><path d="M2.737 18.78c1.08-1.08 4.752-4.716 5.112-5.136c.381-.444.072-1.044.256-2.904c.089-.9.282-1.574.836-2.076c.66-.624 1.2-.624 3.06-.666c1.62.042 1.812-.138 1.98.282c.12.3-.24.48-.672.96c-.96.96-1.524 1.44-1.578 1.74c-.39 1.32 1.146 2.1 1.986 1.26c.318-.318 1.788-1.8 1.932-1.92c.108-.096.367-.092.492.06c.108.106.12.12.108.6c-.01.444-.006 1.082-.004 1.74c.001.852-.044 1.8-.404 2.28c-.72 1.08-1.92 1.14-3 1.188c-1.02.06-1.86-.048-2.124.144c-.216.108-1.356 1.308-2.736 2.688l-2.46 2.46c-2.04 1.62-4.284-.9-2.784-2.7"/></g></svg>  
              </label>
              <li style="--i: 0" class="circle-box circle-box-share-playlist-of-the-user" title="Share Playlist">
                <button class="anchor">
                    <svg  viewBox="0 0 24 24"><path fill="currentColor" d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81c1.66 0 3-1.34 3-3s-1.34-3-3-3s-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65c0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92M18 4c.55 0 1 .45 1 1s-.45 1-1 1s-1-.45-1-1s.45-1 1-1M6 13c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1m12 7.02c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1"/></svg>
                </button>
              </li>
              <li style="--i: 1" class="circle-box circle-box-edit-playlist-name-of-the-user" title="Edit Playlist Name">
                <button class="anchor">
                  <svg viewBox="0 0 24 24"><path fill="currentColor" d="M15.275 12.475L11.525 8.7L14.3 5.95l-.725-.725L8.1 10.7L6.7 9.3l5.45-5.475q.6-.6 1.413-.6t1.412.6l.725.725l1.25-1.25q.3-.3.713-.3t.712.3L20.7 5.625q.3.3.3.713t-.3.712zM6.75 21H3v-3.75l7.1-7.125l3.775 3.75z"/></svg>
                </button>
              </li>
              <li style="--i: 2" class="circle-box circle-box-delete-playlist-of-the-user" title="Delete Playlist">
                <button class="anchor">
                  <svg viewBox="0 0 24 24"><!-- Icon from Solar by 480 Design - https://creativecommons.org/licenses/by/4.0/ --><g fill="none" stroke="currentColor" stroke-width="1.5"><path stroke-linecap="round" d="M20.5 6h-17m15.333 2.5l-.46 6.9c-.177 2.654-.265 3.981-1.13 4.79s-2.196.81-4.856.81h-.774c-2.66 0-3.991 0-4.856-.81c-.865-.809-.954-2.136-1.13-4.79l-.46-6.9M9.5 11l.5 5m4.5-5l-.5 5"/><path d="M6.5 6h.11a2 2 0 0 0 1.83-1.32l.034-.103l.097-.291c.083-.249.125-.373.18-.479a1.5 1.5 0 0 1 1.094-.788C9.962 3 10.093 3 10.355 3h3.29c.262 0 .393 0 .51.019a1.5 1.5 0 0 1 1.094.788c.055.106.097.23.18.479l.097.291A2 2 0 0 0 17.5 6"/></g></svg>  
                </button>
              </li>
              <li style="--i: 3" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 4" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 5" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 6" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 7" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
          </aside>

          <aside class="menu-tooltip menu-tooltip-global menu-invisible">
              <input type="checkbox" id="toggle" />
              <label for="toggle" class="toggle" title="Config">
                <svg  viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" color="currentColor"><path d="M2.256 15.632c.034-.323.268-.583.736-1.104l1.031-1.153c.252-.32.431-.875.431-1.375s-.179-1.056-.43-1.375L2.991 9.472c-.468-.52-.702-.781-.736-1.104s.14-.627.49-1.234l.494-.857c.373-.648.56-.972.878-1.1c.317-.13.676-.028 1.395.176l1.22.343c.459.106.94.046 1.358-.169l.337-.194a2 2 0 0 0 .788-.968l.334-.997c.22-.66.33-.99.591-1.18C10.403 2 10.75 2 11.444 2h1.115c.694 0 1.042 0 1.303.189s.371.519.59 1.179l.335.997a2 2 0 0 0 .788.968l.337.194c.418.215.9.275 1.358.17l1.22-.344c.719-.204 1.078-.306 1.395-.177c.318.13.505.453.878 1.101l.493.857c.35.607.525.91.491 1.234s-.268.583-.736 1.104l-1.031 1.153c-.252.319-.431.875-.431 1.375s.179 1.056.43 1.375l1.032 1.153c.468.52.702.781.736 1.104s-.14.627-.49 1.234l-.494.857c-.373.648-.56.972-.878 1.1c-.317.13-.676.028-1.395-.176l-1.22-.343a2 2 0 0 0-1.359.169l-.336.194c-.36.23-.636.57-.788.968l-.334.997c-.22.66-.33.99-.591 1.18c-.261.188-.609.188-1.303.188h-1.115c-.694 0-1.041 0-1.303-.189c-.261-.189-.371-.518-.59-1.178"/><path d="M2.737 18.78c1.08-1.08 4.752-4.716 5.112-5.136c.381-.444.072-1.044.256-2.904c.089-.9.282-1.574.836-2.076c.66-.624 1.2-.624 3.06-.666c1.62.042 1.812-.138 1.98.282c.12.3-.24.48-.672.96c-.96.96-1.524 1.44-1.578 1.74c-.39 1.32 1.146 2.1 1.986 1.26c.318-.318 1.788-1.8 1.932-1.92c.108-.096.367-.092.492.06c.108.106.12.12.108.6c-.01.444-.006 1.082-.004 1.74c.001.852-.044 1.8-.404 2.28c-.72 1.08-1.92 1.14-3 1.188c-1.02.06-1.86-.048-2.124.144c-.216.108-1.356 1.308-2.736 2.688l-2.46 2.46c-2.04 1.62-4.284-.9-2.784-2.7"/></g></svg>  
              </label>
              <li style="--i: 0" class="circle-box circle-box-share-playlist-global" title="Share Playlist">
                <button class="anchor">
                    <svg  viewBox="0 0 24 24"><path fill="currentColor" d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81c1.66 0 3-1.34 3-3s-1.34-3-3-3s-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65c0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92M18 4c.55 0 1 .45 1 1s-.45 1-1 1s-1-.45-1-1s.45-1 1-1M6 13c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1m12 7.02c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1"/></svg>
                </button>
              </li>
              <li style="--i: 1" class="circle-box circle-box-random-list-global" title="Sort Random List">
                <button class="anchor">
                    <svg  viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 21h-4v-4m0 4l5-5M6.5 9.504l-3.5-2L5 4M3 7.504l6.83-1.87M4 16l4-1l1 4m-1-4l-3.5 6M21 5l-.5 4l-4-.5m4 .5L16 3.5"/></svg>
                </button>
              </li>
              <li style="--i: 2" class="circle-box circle-box-play-all-songs-global" title="Play Playlist">
                <button class="anchor">
                    <svg  viewBox="0 0 24 24"><!-- Icon from Material Symbols by Google - https://github.com/google/material-design-icons/blob/master/LICENSE --><path fill="currentColor" d="m9.5 16.5l7-4.5l-7-4.5zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"/></svg> 
                </button>
              </li>
              <li style="--i: 3" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 4" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 5" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 6" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
              <li style="--i: 7" class="circle-box">
                <a href="#" class="anchor"></a>
              </li>
          </aside>
        </header>
       

      `;
    }
  }

  customElements.define('list-header', ListHeader);
</script>
