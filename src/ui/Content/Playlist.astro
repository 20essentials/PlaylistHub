---
import Clock from '@/icons/clock.astro';
import SongItem from '@/components/SongItem.astro';
import Config from '@/icons/config.astro';
const user = await Astro.locals.currentUser();
const hiddenColumn = user ? 'flex' : 'none';
const classLastColumn = user ? 'true' : 'false';
const columnsPlaylists = user
  ? `3% 1fr 0.7fr 0.7fr 0.1fr 0.1fr`
  : '3% 1fr 0.7fr 0.7fr 0.1fr';
const columnsPlaylistsInVieport = user ? `8% 1fr 14% 10%` : '8% 1fr 14%';
---

<style
  define:vars={{
    columns: columnsPlaylists,
    hiddenColumn,
    columnsportrait: columnsPlaylistsInVieport
  }}
>
  .playlist {
    --translucid-color: color-mix(
      in srgb,
      var(--medium-bgcolor),
      transparent 65%
    );
    --playlist-format: var(--columns);
    display: flex;
    flex-direction: column;
    padding: 1.25vmax;
    gap: 0.15vmax;
    background: linear-gradient(
      to bottom,
      var(--translucid-color) 0 25%,
      var(--medium-bgcolor) 80% 100%
    );
    flex-grow: 1;

    @media (width <= 1111px) and (orientation: portrait) {
      --playlist-format: var(--columnsportrait);

      .centrar {
        padding-left: 0.7vmax;
      }
    }

    .cell {
      font-size: 1vmax;

      &.last-cell {
        justify-content: center;
        display: var(--hiddenColumn);

        svg {
          width: 1.2vmax;
          height: 1.2vmax;
        }
      }
    }

    .clock {
      width: 1vmax;
      height: 1vmax;
      color: var(--dark-textcolor);
    }

    & header {
      display: grid;
      grid-template-columns: var(--playlist-format);
      font-family: var(--default-font);
      font-weight: 500;
      color: var(--dark-textcolor);

      div:nth-child(1) {
        padding-left: 0.5vmax;
      }

      div:nth-child(2) {
        padding-left: 0.7vmax;
      }

      .esconder {
        @media (width <= 1111px) and (orientation: portrait) {
          display: none;
        }
      }

      div:nth-child(4) {
        text-align: center;
      }

      & + hr {
        width: 100%;
        border: 0;
        border-bottom: 0.1vmax solid var(--dark-textcolor);
        opacity: 0.25;
        margin-block: 0.5vmax;
      }
    }
  }
</style>

<div
  class='song playlist header-data-items-class'
  data-last-column={classLastColumn}
>
  <SongItem />

  <header class='header-of-cells'>
    <div class='cell'>#</div>
    <div class='cell cell-title'>Title</div>
    <div class='cell esconder'>Album</div>
    <div class='cell esconder'>Date of Addition</div>
    <div class='cell centrar'>
      <Clock class='clock' />
    </div>
    <div class='cell last-cell last-cell-of-header'>
      <Config />
    </div>
  </header>
  <hr />
</div>

<script>
  import { $ } from '@/utils/functions';

  function showPlaylisIcon() {
    const headerDataClass = $('.header-data-items-class') as HTMLElement;
    const existUser = headerDataClass.dataset.lastColumn;
    const songItems = document.querySelectorAll('song-item');
    songItems.forEach(el => {
      const row = el.shadowRoot?.querySelector('.row-item');
      const isFlex = el.getAttribute('displayValueOfLastIcon');
      const playListIcon = row?.querySelector('.playlist-icon');
      if (existUser === 'true' || isFlex === 'flex') {
        playListIcon?.classList.remove('escondido');
        return;
      }

      playListIcon?.classList.toggle('escondido', true);
    });
  }

  setTimeout(() => {
    showPlaylisIcon();
  }, 600);

  document.addEventListener('click', e => {
    const target = e.target as HTMLElement;

    if (target.matches('.playlist-item')) {

      setTimeout(() => {
        showPlaylisIcon();
      }, 600);
    }
  });
</script>
