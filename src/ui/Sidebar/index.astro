---
import playlist from '@/data/playlist.json';
import PlayListItem from '@/components/PlayListItem.astro';
import { IS_DATABASE_ACTIVE } from 'astro:env/server';
import {
  readPlaylistsOfTheUser,
  getAllSongsOfOnePlaylist,
  insertNewUser
} from '@/db/client';

const convertInValidSlug = (text: string) =>
  text.toLowerCase().replace(/\s+/g, '-').replace(/-+/g, '-');
const user = await Astro.locals.currentUser();
const userId = user?.id ?? '';
const userEmail = user?.primaryEmailAddress?.emailAddress ?? '';
const userName = user?.username ?? '';
// const userData = await insertNewUser(userId, userEmail, userName);
const local_id = userId;
const allPlaylistFromDB: any[] = await readPlaylistsOfTheUser(userId);
const allPlaylistTsoRenderinLOCAL_STORAGE = await Promise.all(
  allPlaylistFromDB.map(async el => [
    convertInValidSlug(el.title),
    await getAllSongsOfOnePlaylist(el.id_playlist)
  ])
);

const userImg = user?.imageUrl;
const containerHeight = user
  ? 'calc(100vh - var(--player-height) - 10.3vmax)'
  : 'calc(100vh - var(--player-height) - 8vmax)';
//Aqui podria traer la playlist favorite del usuario de una base de datos
//Aqui podria traer todas las playlist creadas por el usuario

const favoriteBrands = {
  fromUser: 'TRUE',
  isPlaylistFavorites: 'TRUE',
  title: 'Favorite Brands',
  color: '#f00',
  whatColorIs: 'red'
};

// const firstPlaylistOfUser = {
//   title: 'Code-Fi',
//   color: '#08d437',
//   fromUser: 'TRUE',
//   whatColorIs: 'Clear Green'
// };

// const secondPlaylistOfUser = {
//   title: 'Chill Lofi',
//   color: '#DAA520',
//   fromUser: 'TRUE',
//   whatColorIs: 'GoldenRod'
// };

// const thirdPlaylistOfUser = {
//   title: 'SpotiManz Favorites',
//   color: '#ec1cce',
//   fromUser: 'TRUE',
//   whatColorIs: 'Purple Elegant'
// };

interface PlaylistObject {
  title: string;
  color: string;
  whatColorIs: string;
  fromUser?: boolean | string;
  isPlaylistFavorites?: boolean | string;
  id_playlist?: string;
}

const globalPlaylist: PlaylistObject[] = [...playlist];

const userPlaylist: PlaylistObject[] = [
  favoriteBrands,
  ...allPlaylistFromDB
  // firstPlaylistOfUser,
  // secondPlaylistOfUser,
  // thirdPlaylistOfUser
];
---

<script
  is:inline
  define:vars={{
    IS_DATABASE_ACTIVE,
    allPlaylistTsoRenderinLOCAL_STORAGE,
    allPlaylistFromDB,
    local_id
  }}
>
  function getPlaylistName_(slug) {
    const PREFIX_LS = 'playlist_hub_';
    return `${PREFIX_LS}${slug}`;
  }

  function createCustomPlaylist(slug, data) {
    const playlistName = getPlaylistName_(slug);
    localStorage.setItem(playlistName, data);
  }

  if (IS_DATABASE_ACTIVE) {
    allPlaylistTsoRenderinLOCAL_STORAGE.forEach(pair => {
      const [slug, listOfSongs] = pair;
      const jsonBrands = JSON.stringify(listOfSongs);
      createCustomPlaylist(slug, jsonBrands);
    });

    localStorage.setItem('allPlaylistFromDB', JSON.stringify(allPlaylistFromDB));
    localStorage.setItem('local_id', local_id);
  }
</script>

<style define:vars={{ containerHeight }}>
  .container {
    display: flex;
    flex-direction: column;
    height: 100%;
    gap: var(--pad-gap) 0;
    max-height: calc(100vh - var(--player-height));
  }

  .top-sidebar {
    background: var(--medium-bgcolor);
    border-radius: var(--border-radius);
    min-height: 3vmax;
    display: flex;
    flex-wrap: wrap;
    place-content: center;
    padding: 1vmax;

    .btn {
      position: relative;
      background-color: #1e293b;
      width: 100%;
      min-height: 3vmax;
      border: 0.15vmax solid var(--theme-color);
      color: var(--theme-color);
      border-radius: 0.5vmax;
      overflow: hidden;
      cursor: pointer;
      padding: 0.3vmax;

      @media (width <= 1111px) {
        background-color: transparent;
      }

      input {
        position: absolute;
        inset: 0;
        border-radius: inherit;
        font-size: 1vmax;
        padding-left: 0.8vmax;
        color: var(--theme-color);
        display: flex;
        background-color: #111;
        border-radius: 0.4vmax;

        &,
        &:focus {
          border: none;
          outline: none;
        }
      }

      &::before,
      &::after {
        content: '';
        position: absolute;
        border-radius: 50%;
        filter: blur(0.6vmax);
        transition: all 0.5s ease;
        pointer-events: none;
      }

      &::before {
        --s: 2vmax;
        width: var(--s);
        height: var(--s);
        background-color: var(--theme-color);
        top: 0.4vmax;
        right: 0.4vmax;
        z-index: 10;
      }

      &::after {
        --s: 3vmax;
        width: var(--s);
        height: var(--s);
        background-color: var(--theme-color);
        filter: blur(0.6vmax) hue-rotate(90deg);
        top: 0.8vmax;
        right: 1.2vmax;
        z-index: 10;
      }

      &:hover::before {
        right: 1.8vmax;
        bottom: -16px;
      }

      &:hover::after {
        right: -0.7vmax;
      }
    }
  }

  .main-sidebar {
    background: var(--medium-bgcolor);
    border-radius: var(--border-radius);
    height: 100%;
    /* background-color: red; */

    .sidebar-headers {
      /* background-color: orange; */
      display: flex;
      border-bottom: 0.1vmax solid #fff2;

      .sidb {
        min-width: 50%;
        display: flex;
        flex-wrap: wrap;
        place-content: center;
        padding: 0.5vmax;

        &.sidb-active {
          filter: brightness(125%);
          background-color: color-mix(
            in srgb,
            var(--theme-color) 50%,
            transparent 50%
          );
        }

        &.sidebar-left {
          /* background-color: cadetblue; */
          border-top-left-radius: var(--border-radius);
        }

        &.sidebar-right {
          /* background-color: orange; */
          border-left: 0.1vmax solid #fff2;
          border-top-right-radius: var(--border-radius);
        }

        img {
          width: 1.5vmax;
          height: 1.5vmax;
          border-radius: 50%;
          pointer-events: none;
        }
      }
    }

    .the-container {
      display: flex;
      flex-direction: column;

      .playlist-container {
        font-family: var(--default-font);
        padding: 0.3vmax;
        display: flex;
        flex-direction: column;
        height: var(--containerHeight);
        padding-bottom: 0;
        padding-top: 0.6vmax;

        & .search-container {
          display: flex;
          align-items: center;
          padding: 0.5vmax;
          padding-left: 0.8vmax;

          .text {
            font-size: 0.8vmax;
            padding-left: 0.4vmax;
            margin-top: 0.5vmax;
          }

          & input[type='search'] {
            border: 0;
            background: transparent;
            padding: 0.4rem 0;
            margin: 0 0.5rem;
            width: 150px;
          }

          & > span {
            display: flex;
            align-items: center;
            gap: 0.3vmax;
          }
        }

        & .playlist {
          display: flex;
          flex-direction: column;
          padding: 0.3vmax;
          overflow-y: scroll;
          max-height: 100%;
          gap: 0.3vmax;
        }

        .playlist::-webkit-scrollbar {
          width: 0.4vmin;
        }
        .playlist::-webkit-scrollbar-thumb {
          background: #fff4;
          border-radius: 0 var(--pad-gap) var(--pad-gap) 0;
        }
        .playlist::-webkit-scrollbar-track {
          background: transparent;
        }
      }
    }
  }

  .sidebarPlaylist {
    scroll-behavior: smooth;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById('search-input') as HTMLInputElement;
    const playlistContainer = document.querySelector(
      '.sidebarPlaylist'
    ) as HTMLElement;

    input.addEventListener('input', () => {
      const searchTerm = input.value.toLowerCase();
      playlistContainer.scrollTop = 0;

      const allPlaylists = [...playlistContainer.children];

      const visibles = allPlaylists.filter(el =>
        el.classList.contains('visible')
      );
      const invisibles = allPlaylists.filter(
        el => !el.classList.contains('visible')
      );

      // Si no hay término de búsqueda, mostrar en orden original: favorite → visibles → invisibles

      // Dividir los visibles en coincidencias y no coincidencias
      const matches: any = [];
      const nonMatches: any = [];

      visibles.forEach(el => {
        const text = el.textContent?.toLowerCase() || '';
        if (text.includes(searchTerm)) {
          matches.push(el);
        } else {
          nonMatches.push(el);
        }
      });

      // Ordenar los que hacen match
      matches.sort((a: any, b: any) => {
        const aText = a.textContent?.toLowerCase() || '';
        const bText = b.textContent?.toLowerCase() || '';
        return aText.localeCompare(bText);
      });

      // Concatenar: matches → nonMatches → invisibles
      const finalOrder = [...matches, ...nonMatches, ...invisibles];

      // Reinsertar en ese orden
      finalOrder.forEach(el => playlistContainer.appendChild(el));
    });
  });
</script>

<div class='container'>
  <div class='top-sidebar'>
    <button class='btn'>
      <input
        spellcheck='false'
        autocomplete='off'
        id='search-input'
        type='text'
        maxlength='20'
        placeholder='Seach Playlist'
      />
    </button>
  </div>
  <div class='main-sidebar'>
    {
      user && (
        <nav class='sidebar-headers'>
          <aside class='sidebar-left sidb sidb-active' title='Global Playlists'>
            <img draggable='false' src='/assets/earth.png' alt='earth' />
          </aside>
          <aside class='sidebar-right sidb' title='Personal Playlists'>
            <img draggable='false' src={userImg} alt='User logo' />
          </aside>
        </nav>
      )
    }
    <section class='the-container'>
      <div class='playlist-container'>
        <div class='playlist sidebarPlaylist'>
          {
            globalPlaylist
              .sort((a, b) => a.title.localeCompare(b.title))
              .map((pItem, i) => (
                <PlayListItem
                  {...pItem}
                  tab={i}
                  visible={pItem?.fromUser === 'TRUE' ? 'invisible' : 'visible'}
                  fromUser={'FALSE'}
                  slug={convertInValidSlug(pItem.title)}
                />
              ))
          }
          {
            userPlaylist
              .sort((a, b) => {
                // Forzar que 'favoriteBrands' vaya primero
                if (a?.isPlaylistFavorites) return -1;
                if (b?.isPlaylistFavorites) return 1;
                return a.title.localeCompare(b.title);
              })
              .map((pItem, i) => (
                <PlayListItem
                  {...pItem}
                  visible={pItem?.fromUser === 'TRUE' ? 'invisible' : 'visible'}
                  isPlaylistFavorites={
                    pItem?.isPlaylistFavorites === 'TRUE' ? 'TRUE' : 'FALSE'
                  }
                  tab={i}
                  fromUser={'TRUE'}
                  slug={convertInValidSlug(pItem.title)}
                  imageFromUser={
                    pItem.id_playlist
                      ? getAllSongsOfOnePlaylist(pItem.id_playlist)
                      : false
                  }
                />
              ))
          }
          <!-- getAllSongsOfOnePlaylist(pItem.id_playlist)[0].urlPoster -->
        </div>
      </div>
    </section>
  </div>
</div>

<script>
  import { $, $$ } from '@/utils/functions';
  import {
    PREFIX_LS,
    createSidePlaylistItem,
    convertSlugToText,
    convertInValidSlug,
    obtenerElementoAleatorio
  } from '@/utils/localStorage';
  import playlist from '@/data/playlist.json';
  const arrayOfColorsRandoms = playlist.map(el => el.color);
  const arrayOfSlugs = playlist.map(el => convertInValidSlug(el.title));
  const randomSlug = obtenerElementoAleatorio(arrayOfSlugs);
  const response = await fetch(`../../data/${randomSlug}.json`);
  const playlistRandomObject = await response.json();
  const arrayOfRandomPosters = playlistRandomObject.map(
    (el: any) => el.urlPoster
  );

  const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
  const _originalPlaylist = [...$sideBarPlaylist.children].filter(
    playlist => playlist.getAttribute('data-from-user') === 'FALSE'
  );
  let globalPlaylistLength = _originalPlaylist.length;

  document.addEventListener('click', e => {
    const target = e.target as HTMLElement;
    if (target.matches('.sidebar-left')) {
      if (target.classList.contains('sidb-active')) return;
      $('.sidb-active')?.classList.remove('sidb-active');
      target.classList.add('sidb-active');
      const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
      let originalPlaylist = [...$sideBarPlaylist?.children];
      originalPlaylist.forEach(el => {
        el.className = el.className.includes('playlist-item visible')
          ? 'playlist-item invisible'
          : 'playlist-item visible';

        return el;
      });

      setTimeout(() => {
        const lastIndex =
          localStorage.getItem('lastIndexOfPlaylistItemClicked') ?? '0';
        const lastIndexNumber = Number(lastIndex);

        ([...$sideBarPlaylist.children][lastIndexNumber] as HTMLElement).click();
      }, 50);

      return;
    }

    if (target.matches('.sidebar-right')) {
      const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
      let originalPlaylist = [...$sideBarPlaylist?.children];
      if (!target.classList.contains('sidb-active')) {
        originalPlaylist.forEach(el => {
          el.className = el.className.includes('playlist-item visible')
            ? 'playlist-item invisible'
            : 'playlist-item visible';

          return el;
        });
      }
      $$('.sidb-active').forEach(el => el.classList.remove('sidb-active'));
      target.classList.add('sidb-active');

      let originalPlaylist_ = [...$sideBarPlaylist?.children];
      const lastElement = originalPlaylist_[originalPlaylist_.length - 1];
      const newElement = lastElement.cloneNode(true) as HTMLElement;
      let startTabIndex = Number(newElement.getAttribute('tabindex'));

      for (const key in localStorage) {
        if (key.startsWith(PREFIX_LS)) {
          startTabIndex += 1;
          const currentPlaylistString = localStorage.getItem(key) ?? '[]';
          const currenPlaylistJson = JSON.parse(currentPlaylistString);
          const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
          const slug = key.replace(PREFIX_LS, '');
          const existAlreadyThisPlaylists = [...$sideBarPlaylist.children].some(
            el => {
              return el.getAttribute('data-id') === slug;
            }
          );
          //New
          const allPlaylistFromDB =
            localStorage.getItem('allPlaylistFromDB') ?? '[]';
          const allPlaylistFromDbArray = JSON.parse(allPlaylistFromDB);

          if (!existAlreadyThisPlaylists) {
            const arrayOfPosters = currenPlaylistJson.map(
              (el: any) => el.urlPoster
            );

            const img =
              currenPlaylistJson.length > 0
                ? obtenerElementoAleatorio(arrayOfPosters)
                : obtenerElementoAleatorio(arrayOfRandomPosters);

            const title = convertSlugToText(slug);
            const someElementWithTheTitle = allPlaylistFromDbArray.find(
              (el: any) => el.title === title
            );

            let theColor = obtenerElementoAleatorio(arrayOfColorsRandoms);

            if (someElementWithTheTitle) {
              const { color } = someElementWithTheTitle;
              theColor = color;
            }

            createSidePlaylistItem({
              tabindex: startTabIndex,
              slug,
              color: theColor,
              poster: img,
              title
            });
          }
        }
      }

      setTimeout(() => {
        const favoritePlaylist = [...$sideBarPlaylist.children][
          globalPlaylistLength
        ] as HTMLElement;

        favoritePlaylist.click();
      }, 100);
      return;
    }
  });

  document.addEventListener('keydown', e => {
    const { key } = e;
    if (key === 'Tab') {
      e.preventDefault();
      const currentTabActive = $('.sidb-active') as HTMLElement;
      const isTabRight = currentTabActive?.classList.contains('sidebar-right');
      const sibling = isTabRight
        ? 'previousElementSibling'
        : 'nextElementSibling';
      const targetTab = currentTabActive[sibling] as HTMLElement;
      targetTab.click();
    }
  });
</script>
