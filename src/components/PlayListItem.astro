---
import PinnedIcon from '@/icons/pinned.astro';
import {
  convertInValidSlug,
  obtenerElementoAleatorio
} from '@/utils/localStorage';
import NamesOfPlaylists from '@/data/playlist.json' with { type: 'json' };
import Volume from '@/icons/music.astro';
const {
  slug,
  title = '',
  color,
  tab,
  visible,
  isPlaylistFavorites = 'FALSE',
  fromUser = 'FALSE',
  imageFromUser = false
} = Astro.props;

const initialLetterOfEachWord = title.slice(0, 3).toUpperCase();

type SongData = {
  urlPoster: string;
  [key: string]: any;
};

const files = import.meta.glob('../data/*.json', { eager: true }) as Record<
  string,
  { default: SongData[] }
>;

const mySlug = `../data/${slug}.json`;

const currentJson = files[mySlug]?.default || [];
const randomNumber = ~~(Math.random() * currentJson.length);
const randomSrc = currentJson[randomNumber]?.urlPoster || '';
let image = isPlaylistFavorites === 'TRUE' ? '/assets/hearFavorite.png' : randomSrc;

if (imageFromUser && (isPlaylistFavorites === 'FALSE')) {
  const arrayOfSongs = await imageFromUser;
  const posters = arrayOfSongs.map((el: any) => el.urlPoster);
  image = obtenerElementoAleatorio(posters);
  if (!image) {
    const allSlugs = NamesOfPlaylists.map(({ title }) =>
      convertInValidSlug(title)
    );
    const randomSlug = ~~(Math.random() * allSlugs.length);
    const slugi = allSlugs[randomSlug];
    const module = await import(`../data/${slugi}.json`);
    const playlistCorriente = module.default;
    image = obtenerElementoAleatorio(playlistCorriente).urlPoster
  }
} 
---

<style>
  .playlist-item {
    display: flex;
    align-items: center;
    padding: 0.4vmax;
    gap: 0.5vmax;
    border-radius: 8px;
    height: max-content;
    position: relative;
    cursor: pointer;
    transition: background-color 0.2s ease;

    &.visible {
      display: flex;
    }

    &.invisible {
      display: none;
    }

    * {
      pointer-events: none;
    }

    &:focus {
      border: none;
      outline: none;
    }

    &.title-green {
      .title {
        color: var(--theme-color);
      }

      @media (width >= 1111px) {
        .volume-icon2 {
          display: flex;
        }
      }
    }

    .volume-icon2 {
      width: 1.1vmax;
      height: 1.1vmax;
      position: absolute;
      right: 1vmax;
      display: none;
      color: var(--theme-color);
    }

    @media (width <= 1111px) {
      border-radius: calc(var(--pad-gap) / 2);
    }

    @media (hover: hover) and (pointer: fine) {
      &:hover,
      &.playlist-item-active {
        background-color: var(--light-bgcolor);
      }
    }

    &.playlist-item-active {
      background-color: var(--light-bgcolor);
    }

    & img {
      --avatar-size: 3vmax;
      width: var(--avatar-size);
      height: var(--avatar-size);
      border-radius: 0.4vmax;
    }

    & .data {
      display: flex;
      flex-direction: column;
      gap: 0.1vmax;
      height: 100%;

      & .title {
        font-weight: 400;
        font-size: 1vmax;
        align-content: end;
        display: flex;
      }

      .subtitle {
        font-size: 0.9vmax;
      }

      & [data-icon] {
        color: var(--accent-color);
      }

      & .subtitle-container {
        color: var(--dark-textcolor);
        display: flex;
        gap: 0.3vmax;
      }
    }
  }
</style>

<aside
  class=`playlist-item ${visible}`
  data-id={slug}
  data-color={color}
  tabindex={tab}
  data-from-user={fromUser}
  data-is-playlist-favorites={isPlaylistFavorites}
>
  <img src={image} alt={title} />
  <div class='data'>
    <strong class='title'>{title}</strong>
    <div class='subtitle-container'>
      <PinnedIcon width='0.7vmax' color='springgreen' />
      <span class='subtitle'>Playlist - {initialLetterOfEachWord}</span>
    </div>
  </div>
  <Volume class='volume-icon2' />
</aside>
