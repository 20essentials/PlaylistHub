<script type='module'>
  import { MusicPlayer } from './modules/MusicPlayer.js';
  import {
    existThisSongInTheCurrentPlaylist,
    FAVORITE_SLUG
  } from './modules/localStorage.js';
  import { emitEvent } from './modules/emitter.js';
  const convertInValidSlug = text =>
    text.toLowerCase().replace(/\s+/g, '-').replace(/-+/g, '-');
  import NamesOfPlaylists from './data/playlist.json' with { type: 'json' };
  const allSlugs = NamesOfPlaylists.map(({ title }) => convertInValidSlug(title));
  const allTitles = NamesOfPlaylists.map(({ title }) => title);
  const allColors = NamesOfPlaylists.map(({ color }) => color);
  const randomSlug = ~~(Math.random() * allSlugs.length);
  const slug = allSlugs[randomSlug];
  // const titleOfCurrenPlaylist = allTitles[randomSlug];
  // const colorOfCurrentPlaylist = allColors[randomSlug];
  const playlistCorriente = await import(`./data/${slug}.json`, {
    with: { type: 'json' }
  });
  const playlistCorrienteJson = playlistCorriente.default;
  const randonNumSong = ~~(Math.random() * playlistCorrienteJson.length);
  const playlistName = slug;
  const id = randonNumSong + 1;
  const musicPlayer = new MusicPlayer(playlistName, id);
  // localStorage.setItem('firstRandomPlaylistName', titleOfCurrenPlaylist)
  // localStorage.setItem('firstRandomPlaylistFileName', playlistName)

  const buttons = {
    play: document.querySelector('.song-player-container .play'),
    prev: document.querySelector('.song-player-container .prev'),
    next: document.querySelector('.song-player-container .next'),
    shuffle: document.querySelector('.song-player-container .shuffle'),
    repeat: document.querySelector('.song-player-container .repeat')
  };

  buttons.play.addEventListener('click', () => musicPlayer.play());
  buttons.prev.addEventListener('click', () => musicPlayer.prev());
  buttons.next.addEventListener('click', () => musicPlayer.next());
  buttons.repeat.addEventListener('click', () =>
    buttons.repeat.classList.toggle('disabled')
  );
  buttons.shuffle.addEventListener('click', () => {
    buttons.shuffle.classList.toggle('disabled');
    musicPlayer.sortSongs();
  });

  setTimeout(() => {
    const songInfo = musicPlayer.getInfoSong();

    //Esto pondra el corazon solo la primera vez a la primera cancion random que aparezca. Solo funciona al inicio
    const existInFavoritesBrands = existThisSongInTheCurrentPlaylist(
      FAVORITE_SLUG,
      {
        artist: songInfo.artist,
        title: songInfo.title
      }
    );

    emitEvent('updateNewSongInFavoriteBrands', document, {
      title: songInfo.title,
      artist: songInfo.artist,
      updating: existInFavoritesBrands
    });

    if (songInfo) {
      let { title: ButtonTitle, artist, album } = songInfo;
      musicPlayer.updateItemClicked({ ButtonTitle, artist, album });
      const $playlisItemWithTitleGreen = document.querySelector('.title-green');
      $playlisItemWithTitleGreen?.classList.add('playlist-item-active');
      $playlisItemWithTitleGreen?.focus();
    } else {
      //Don't do this in Home ðŸ˜…
      const $playlisItemWithTitleGreen = document.querySelector('.title-green');
      $playlisItemWithTitleGreen?.classList.add('playlist-item-active');
      $playlisItemWithTitleGreen?.focus();
    }
  }, 55);

  const playlistItems = document.querySelectorAll('.playlist-item');
  playlistItems.forEach(playlist => {
    playlist.addEventListener('click', async () => {
      const slug = playlist.dataset.id;
      let title = playlist.querySelector('.title').textContent;

      document
        .querySelectorAll('.playlist-item-active')
        .forEach(el => el.classList.remove('playlist-item-active'));
      playlist.classList.add('playlist-item-active');

      setTimeout(() => {
        const infoSong = musicPlayer.getInfoSong();
        if (!infoSong) return;
        if (localStorage.getItem('the-song-item-deletes-itself') === 'true') {
          const actualIndex = infoSong.index;
          musicPlayer.setCurrentSongIndex( actualIndex - 1);
          localStorage.setItem('the-song-item-deletes-itself', 'false');
          return;
        }

        const { title: ButtonTitle, artist, album } = infoSong;
        musicPlayer.updateItemClicked({ ButtonTitle, artist, album });
      }, 300);

      await musicPlayer.selectList(slug, title, playlist.dataset.color);
    });
  });

  const songPlaylist = document.querySelector('.song.playlist');
  songPlaylist.addEventListener('click', ev => {
    const isClick = ev.detail === 1;

    if (isClick || ev.target.classList.contains('cell-title')) {
      const newSongs = [...document.querySelectorAll('song-item')].map(song =>
        song.getData()
      );
      musicPlayer.setSongs(newSongs);
      const rowItem = ev
        .composedPath()
        .find(tag => tag.classList?.contains('row-item'));
      if (!rowItem) return;

      let id = Number(rowItem.dataset?.id);
      let newIndex = id;
      if (musicPlayer.isShuffle) {
        newIndex = musicPlayer.songList.findIndex(song => song.index === id);
      }

      if (rowItem) {
        musicPlayer.prepare(newIndex);
        musicPlayer.play();
        musicPlayer.togglePlayPause(true);
      }
    }
  });
</script>
