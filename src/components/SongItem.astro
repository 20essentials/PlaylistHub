<script type='module'>
  import { setAnimation } from './modules/setAnimation.js';

  class SongItem extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
    }

    static get styles() {
      return /* css */ `
        .row-item {
          display: grid;
          grid-template-columns: var(--playlist-format);
          font-family: var(--default-font);
          align-items: center;
          padding: 0.3vmax 0.5vmax;
          border-radius: calc(var(--pad-gap) / 2);
          user-select: none;
          cursor: pointer;
          transition: background-color .2s ease;
        

          &.title-green {
            .titulin {
              color: var(--theme-color);
              filter: brightness(150%);
            }

            .num {
                display: none;
              }

            .wave-icon {
                display: flex;
            }
          }

          .wave-icon {
            width: 1vmax;
            display: none;
            color: var(--theme-color);
          }

          div:nth-child(4),
          div:nth-child(5) {
            text-align: center;
          }

          &:hover {
            background-color: #ffffff15;
          }
        }

        .text {
          font-size:1vmax;

          &.fecha {
            position: relative;
            z-index: 50;
          }
        }

        .playlist-icon {
          height: fit-content;
          display: flex;
          justify-content: right;
          text-align: right;


          /* @media (width <= 1111px) and (orientation: portrait) {
            background-color: red;  
          } */


           &.escondido {
            display: none;
          } 
          
          svg {
            width: 1.3vmax;
            height: 1.3vmax;
            opacity: 0.7;
          }
        }

        .playlist-nav-options {
          position: absolute;
          z-index: 800;
          right: 3.4vmax;
          top: 0
          background-color: #0f08;
          display: flex;
          flex-direction: column;
          visibility: hidden;
          pointer-events: none;
          transition: visibility .3s ease, opacity .3s ease;
          opacity: 0;
          border-radius: 0.7vmax;
          transform: translateY(-2vmax);
          gap: 0;

          &.playListNavActive {
            visibility: visible;
            pointer-events: auto;
            opacity: 1;
          }
          
          .option {
            font-size: 1vmax;
            text-align: left;
            display: flex;
            gap: 0.5vmax;
            background-color: #000;
            border: none;
            outline: none;
            padding: 0.45vmax;
            padding-right: 1.5vmax;
            position: relative;
            z-index: 1500;
            transition: background-color .2s ease;
            border-bottom: 0.1vmax solid #fff2;
            text-decoration: none;
            color: inherit;
            align-items: center;

            &:hover {
              background-color: color-mix(in srgb, var(--theme-color), black 50%);
            }

            .left {
              width: 1.1vmax;
              height: 1.1vmax;
              pointer-events: none;

              svg {
                width: 100%;
                height: 100%;
              }
            }
          }
        }

        .esconder {
          @media (width <= 1111px) and (orientation: portrait) {
            display: none;
          }
        }

        .title-container {
          display: flex;
          align-items: center;
          gap: 1vmax;

          & img {
            --size: 3.5vmax;
            width: var(--size);
            height: var(--size);
            border-radius: calc(var(--pad-gap) / 2);

            @media (width <= 800px) and (orientation: landscape) {
              --size: 2.5vmax;
            }
          }

          & .group {
            display: inline-flex;
            flex-direction: column;

            & .artist {
              color: var(--dark-textcolor);

        
            }
          }
        }
      `;
    }

    connectedCallback() {
      this.slug = this.getAttribute('slug');
      this.title = this.getAttribute('title');
      this.artist = this.getAttribute('artist');
      this.album = this.getAttribute('album');
      this.date = this.getAttribute('date');
      this.duration = this.getAttribute('duration');
      this.index = Number(this.getAttribute('index'));
      this.urlPoster = this.getAttribute('urlPoster');
      this.urlSong = this.getAttribute('urlSong');
      this.image = this.urlPoster;
      this.thumb = this.urlPoster;
      this.displayValueOfLastIcon = this.getAttribute('displayValueOfLastIcon');
      this.render();
      const rowItem = this.shadowRoot.querySelector('.row-item');
      setTimeout(() => setAnimation(rowItem, 'FadeMove'), this.index * 25);
      this.playlistIconListeners();
      this.playlistNavListener();
      this.downloadListeners();
      this.addToPlaylistListeners();
      this.removeFromThisPlaylistListeners();
      this.addToYourFavoriteBrandsListener();
    }

    playlistIconListeners() {
      const playlistIcon = this.shadowRoot.querySelector('.playlist-icon');
      playlistIcon.addEventListener('click', e => {
        e.stopPropagation();
        const rowItem = e.target.closest('.row-item');
        const songItems = document.querySelectorAll('song-item');
        const playListNavOption = rowItem.querySelector('.playlist-nav-options');
        if (playListNavOption.classList.contains('playListNavActive')) {
          playListNavOption.classList.remove('playListNavActive');
          return;
        }

        songItems.forEach(el => {
          const row = el.shadowRoot?.querySelector('.row-item');
          const playListNavActive = row?.querySelector('.playListNavActive');
          if (playListNavActive) {
            playListNavActive.classList.remove('playListNavActive');
          }
        });

        playListNavOption.classList.add('playListNavActive');
      });
    }

    playlistNavListener() {
      const navOptions = this.shadowRoot.querySelector('.playlist-nav-options');

      navOptions?.addEventListener('pointerout', e => {
        const goingTo = e.relatedTarget;
        if (!navOptions.contains(goingTo)) {
          navOptions.classList.remove('playListNavActive');
        }
      });
    }

    downloadListeners() {
      const $buttonDownload = this.shadowRoot.querySelector('.downloadClick');
      $buttonDownload.addEventListener('click', e => {
        e.stopPropagation();
        this.descargarArchivo(this.urlSong, `${this.title} - ${this.artist}.mp3`);
      });
    }

    addToPlaylistListeners() {
      const $addToPlaylist = this.shadowRoot.querySelector('.add-to-playlist');
      $addToPlaylist.addEventListener('click', e => {
        e.stopPropagation();
        alert('add');
      });
    }

    removeFromThisPlaylistListeners() {
      const $removeThisSongFromPlaylist = this.shadowRoot.querySelector(
        '.remove-from-playlist'
      );
      $removeThisSongFromPlaylist.addEventListener('click', e => {
        e.stopPropagation();
        alert('remove');
      });
    }

    obtenerFechaActualISO() {
      const ahora = new Date();
      const año = ahora.getFullYear();
      const mes = String(ahora.getMonth() + 1).padStart(2, '0');
      const dia = String(ahora.getDate()).padStart(2, '0');
      return `${año}-${mes}-${dia}T00:00:00`;
    }

    addToYourFavoriteBrandsListener() {
      const $addInFavoriteBrand = this.shadowRoot.querySelector(
        '.add-in-favorite-brands'
      );
      $addInFavoriteBrand.addEventListener('click', e => {
        e.stopPropagation();
        const FAV_PLAYLIST = 'favoritebrands';
        const PREFIX_LS = 'playlist_hub_';
        const PLAYLIST_NAME = `${PREFIX_LS}${FAV_PLAYLIST}`;
        const LS_PLAYLISTS_STRING = localStorage.getItem(PLAYLIST_NAME);
        let LS_playlist_array = JSON.parse(LS_PLAYLISTS_STRING);

        const newSongInFavorite = {
          title: this.title,
          fromUser: true,
          artist: this.artist,
          album: FAV_PLAYLIST,
          date: this.obtenerFechaActualISO(),
          duration: this.duration,
          urlSong: this.urlSong,
          urlPoster: this.urlPoster
        };

        LS_playlist_array.push(newSongInFavorite);

        localStorage.setItem(PLAYLIST_NAME, JSON.stringify(LS_playlist_array));
      });
    }

    descargarArchivo(url, nombreArchivo) {
      fetch(url)
        .then(response => {
          if (!response.ok) {
            console.log('No se pudo descargar el archivo.');
            return;
          }
          return response.blob();
        })
        .then(blob => {
          const blobUrl = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = blobUrl;
          a.download = nombreArchivo;
          // necesario en algunos navegadores
          document.body.appendChild(a);
          a.click();
          a.remove();
          URL.revokeObjectURL(blobUrl);
        })
        .catch(error => {
          console.error('Error:', error);
          alert(
            'Error al intentar descargar. El servidor puede estar bloqueando la descarga por CORS.'
          );
        });
    }

    getData() {
      return {
        index: this.index,
        album: this.album,
        artist: this.artist,
        date: this.date,
        duration: this.duration,
        slug: this.slug,
        title: this.title,
        urlPoster: this.urlPoster,
        urlSong: this.urlSong
      };
    }

    render() {
      this.shadowRoot.innerHTML = /* html */ `
        <style>${SongItem.styles}</style>
        <div class="row-item" data-id=${this.index}>
          <div class=" text">
            <aside class="num">${(this.index + 1).toString().padStart(2, '0')}</aside>
            <svg class="wave-icon"  viewBox="0 0 135 140" fill="currentColor"><rect y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/><animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/></rect><rect x="30" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/><animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/></rect><rect x="60" width="15" height="140" rx="6"><animate attributeName="height" begin="0s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/><animate attributeName="y" begin="0s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/></rect><rect x="90" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/><animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/></rect><rect x="120" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/><animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/></rect></svg>
          </div>
          
          <div class="title-container">
            <img class="img-thumb" src=${this.thumb} alt=${this.title}>
            <div class="group">
              <div class="text titulin">${this.title}</div>
              <div class="artist text">${this.artist}</div>
            </div>
          </div>
          <div class="text esconder">${this.album}</div>
          <div class="text esconder fecha">${this.date.substring(0, 10)}</div>
          <div class="text">${this.duration}</div>
          <aside class="playlist-icon escondido" >
              <svg
                viewBox='0 0 32 32'
              >
                <path
                  d='M3 9h17a1 1 0 0 0 0-2H3a1 1 0 0 0 0 2zm0 6h17a1 1 0 0 0 0-2H3a1 1 0 0 0 0 2zm12 4H3a1 1 0 0 0 0 2h12a1 1 0 0 0 0-2zm14 0h-4v-4a1 1 0 0 0-2 0v4h-4a1 1 0 0 0 0 2h4v4a1 1 0 0 0 2 0v-4h4a1 1 0 0 0 0-2z'
                  stroke='currentColor'
                  stroke-width='1.5'
                  data-name='Layer 2'></path>
              </svg>
          </aside>

          <nav class="playlist-nav-options">
            <button class="option add-to-playlist" title="Save this track to a playlist">
              <span class="left">
                <svg
                  viewBox='0 0 24 24'
                  fill='none'
                  stroke='currentColor'
                  stroke-width='2'
                  stroke-linecap='round'
                  stroke-linejoin='round'
                  ><path stroke='none' d='M0 0h24v24H0z' fill='none'></path><path d='M12 5l0 14'
                  ></path><path d='M5 12l14 0'></path></svg
                >  
              </span>
              <span class="right">Add to Playlist</span>
            </button>
            <button class="option remove-from-playlist" title="Delete this song from the current playlist">
               <span class="left">
                <svg
                  viewBox='0 0 24 24'
                  fill='none'
                  stroke='currentColor'
                  stroke-width='2'
                  stroke-linecap='round'
                  stroke-linejoin='round'
                  ><path stroke='none' d='M0 0h24v24H0z' fill='none'></path><path d='M4 7l16 0'
                  ></path><path d='M10 11l0 6'></path><path d='M14 11l0 6'></path><path
                    d='M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12'></path><path
                    d='M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3'></path></svg
                >
               </span>
               <span class="right">Remove from this Playlist</span>
              </button>
            <button class="option add-in-favorite-brands" title="Mark this brand as a favorite">
              <span class="left">
                <svg viewBox='0 0 24 24'
                  >
                  <path
                    fill='currentColor'
                    d='M1 8.475q0-2.35 1.575-3.912T6.5 3q1.3 0 2.475.55T11 5.1q.85-1 2.025-1.55T15.5 3q1.775 0 3.05.888t1.925 2.287q.175.375.025.763t-.525.562t-.763.025T18.65 7q-.45-1-1.325-1.5T15.5 5q-1.15 0-2.1.65t-1.65 1.6q-.125.2-.325.288T11 7.624t-.425-.1t-.325-.275q-.7-.95-1.65-1.6T6.5 5q-1.425 0-2.462.988T3 8.474q0 .825.35 1.675t1.25 1.963t2.45 2.6T11 18.3l2.225-1.95q.3-.275.7-.25t.675.3q.3.3.288.738t-.338.712l-2.225 1.975q-.275.25-.625.375t-.7.125t-.7-.125t-.625-.4q-1.125-1-2.612-2.275t-2.838-2.737t-2.287-3.063T1 8.475M18 14h-2q-.425 0-.712-.288T15 13t.288-.712T16 12h2v-2q0-.425.288-.712T19 9t.713.288T20 10v2h2q.425 0 .713.288T23 13t-.288.713T22 14h-2v2q0 .425-.288.713T19 17t-.712-.288T18 16z'
                  ></path></svg
                >
              </span>
              <span class="right"> Add to Your Favorite Brands </span>
            </button>
            <button class="option downloadClick" title="Click to download the audio">
              <span class="left">
                  <svg  viewBox='0 0 24 24'
                    >
                    <path
                      fill='currentColor'
                      d='m12 16l-5-5l1.4-1.45l2.6 2.6V4h2v8.15l2.6-2.6L17 11zm-6 4q-.825 0-1.412-.587T4 18v-3h2v3h12v-3h2v3q0 .825-.587 1.413T18 20z'
                    ></path></svg
                  >
              </span>
              <span class="right"> Download Audio</span>
            </button>
          </nav>
        </div>
      `;
    }
  }

  customElements.define('song-item', SongItem);
</script>
