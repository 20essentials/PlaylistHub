---
import playlist from '@/data/playlist.json';
import CheckedEmpty from '@/icons/checkedvoid.astro';
import CheckedFull from '@/icons/checkedfull.astro';
---

<section class='modal-add-playlists'>
  <section class='container-add-playlists'>
    <aside class='top'>
      <h2>Add <span class='pintado'>ELECTRIC WORRY</span> in...</h2>
      <button class='close-modal-playlist'></button>
    </aside>
    <aside class='container-of-add-to-playlists'>
      <!-- {
        playlist
          .slice(0, 3)
          .toSorted((a, b) => a.title.localeCompare(b.title))
          .map(({ title }) => (
            <aside class='row' data-playlist-titulo='title'>
              <aside class='container-icons'>
                <CheckedEmpty class='playlistEmpty' />
                <CheckedFull class='playlistFull' />
                <img
                  class='confetti'
                  src='/assets/confetti.gif'
                  alt='Confetti Image'
                />
              </aside>
              <h4 class='container-title-of-a-playlist'>{title}</h4>
            </aside>
          ))
      } -->
    </aside>
    <aside class='add-playlist-container'>
      <article class='second-tab'>
        <div class='container-inputs'>
          <input
            type='text'
            id='agregarPlaylistInput'
            placeholder='Create a new Playlist...'
            maxlength='20'
            autocomplete='off'
            translate='no'
            spellcheck='false'
          />
          <span class='longitud-max'><output>0</output>/20</span>
        </div>
        <div class='container-send'>
          <button class='btn-add-playlist'>
            <span class='back'></span>
            <span class='front'></span>
          </button>
        </div>
      </article>
    </aside>
  </section>
</section>

<style>
  .modal-add-playlists {
    font-family: 'Open Sans';
    position: absolute;
    z-index: 70;
    width: 100%;
    height: calc(100vh - var(--player-height));
    backdrop-filter: blur(0.9vmax);
    background-color: #0003;
    display: flex;
    flex-wrap: wrap;
    place-content: center;
    transform: scale(0);
    transition: transform 0.1s ease;

    &.modal-open {
      transform: scale(1);
    }

    .container-add-playlists {
      min-width: 30vmax;
      width: fit-content;
      max-width: 36vmax;
      min-height: 15vmax;
      max-height: 86%;
      background-color: #fff3;
      border-radius: 1.7vmax;
      display: flex;
      flex-direction: column;
      padding: 1.5vmax;
      overflow: hidden;
      gap: 1vmax;

      .top {
        position: relative;

        .close-modal-playlist {
          border: none;
          outline: none;
          box-shadow: none;
          background-color: transparent;
          position: absolute;
          right: 0.8vmax;
          top: 50%;
          transform: translateY(-50%);
          width: 1.7vmax;
          height: 1.7vmax;
          background-image: url('/assets/cross.png');
          background-size: cover;
          display: none;
        }

        h2 {
          font-size: 1.2vmax;
          text-align: center;
          background-color: #222;
          padding: 1vmax;
          border-radius: 0.9vmax;
          padding-inline: 2vmax;

          .pintado {
            color: var(--theme-color);
          }
        }
      }

      .container-of-add-to-playlists {
        flex-grow: 1;
        overflow-y: auto;
        min-height: 7vmax;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(40%, 1fr));
        gap: 0.4vmax;
        scroll-behavior: smooth;
        place-content: center;

        &::-webkit-scrollbar {
          width: 0.5vmax;
        }
        &::-webkit-scrollbar-thumb {
          background-color: color-mix(
            in srgb,
            var(--theme-color) 50%,
            transparent 50%
          );
          border-radius: 1vmax;
          opacity: 0.5;
        }

        &::-webkit-scrollbar-track {
          background: transparent;
        }

        .row {
          font-size: 1vmax;
          display: flex;
          align-items: center;
          position: relative;
          height: fit-content;

          * {
            pointer-events: none;
          }

          .container-icons {
            width: 2vmax;
            height: 100%;
            display: flex;
            position: relative;

            .confetti {
              position: absolute;
              background-blend-mode: multiply;
              box-shadow: none;
              pointer-events: none;
              opacity: 0;
              width: 3vmax;
              height: 3vmax;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
            }

            svg {
              width: 1.4vmax;
              height: 1.4vmax;
              opacity: 0.8;
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);

              &.playlistEmpty {
                &.isSavedInPlaylist {
                  opacity: 0;

                  & + .playlistFull {
                    opacity: 1;
                  }

                  & ~ .confetti {
                    animation: showConffeti 1.5s ease forwards;
                    filter: brightness(300%);
                  }
                }
              }

              &.playlistFull {
                opacity: 0;
                pointer-events: none;
                color: var(--theme-color);
              }
            }
          }

          .container-title-of-a-playlist {
            align-content: center;
          }
        }
      }

      .add-playlist-container {
        border: 0.1vmax solid #0004;
        border-radius: 0.8vmax;
        backdrop-filter: blur(10vmax);
        background-color: #222;

        .second-tab {
          display: flex;
          justify-content: center;
          padding: 1vmax;
          --validate-color: lime;
          --invalid-color: #fb0404;
          width: 80%;
          margin-inline: auto;

          .container-inputs {
            display: flex;
            width: 70%;
            position: relative;
            padding-bottom: 1vmax;
            transition: opacity 0.2s ease;

            .longitud-max {
              position: absolute;
              left: 78%;
              font-size: 0.8vmax;
              color: #fff8;
              position: relative;
              font-style: italic;
              bottom: -1.8vmax;

              &.valid {
                color: var(--validate-color);
              }

              &.invalid {
                color: var(--invalid-color);
              }
            }

            #agregarPlaylistInput {
              border: none;
              outline: none;
              font-family: Arial, Helvetica, sans-serif;
              color: var(--validate-color);
              font-weight: 600;

              &[type='text'] {
                width: 88%;
                background-color: transparent;
                height: 1.5vmax;
                position: absolute;
                top: 0%;
                font-size: 1vmax;
                border-bottom: 0.1vmax solid currentColor;
                caret-color: currentColor;

                &::placeholder {
                  color: #fff8;
                }

                &.valid {
                  color: var(--validate-color);
                }

                &.invalid {
                  color: var(--invalid-color);
                  border-bottom-color: var(--invalid-color);
                }
              }
            }
          }

          .container-send {
            /* background-color: pink; */
            width: 30%;
            display: flex;
            justify-content: center;

            .btn-add-playlist {
              --primary: 255, 90, 120;
              --secondary: 150, 50, 60;
              --secondary2: rgb(128, 30, 40);
              border: none;
              outline: none;
              cursor: pointer;
              user-select: none;
              touch-action: manipulation;
              width: 3.9063vmax;
              height: 3.2552vmax;
              outline: 0.651vmax solid rgb(var(--primary), 0.5);
              border-radius: 100%;
              position: relative;
              zoom: 0.7;

              .back {
                background: var(--secondary2);
                border-radius: 100%;
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
              }

              .front {
                background: linear-gradient(
                  0deg,
                  rgba(var(--primary), 0.6) 20%,
                  rgba(var(--primary)) 50%
                );
                border-radius: 100%;
                position: absolute;
                box-shadow: 0 0.5208vmax 1.0417vmax -0.2083vmax rgba(var(--secondary), 0.5);
                border: 0.0651vmax solid rgb(var(--secondary));
                font-size: 1.25vmax;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
                font-weight: 600;
                font-family: inherit;
                transform: translateY(-15%);
                transition:
                  transform 0.15s ease,
                  box-shadow 0.15s ease;
                color: rgb(var(--secondary));
              }

              &:active .front {
                transform: translateY(0%);
                box-shadow: 0 0;
              }

              &.to-bottom .front {
                transform: translateY(0%);
                box-shadow: 0 0;
              }
            }
          }
        }
      }
    }
  }
</style>

<script>
  import { $, $$ } from '@/utils/functions';
  import {
    existsPlaylist,
    createPlaylistElement,
    addSongInPlaylist,
    removeSongFromPlaylist,
    createPlaylist,
    getPlaylistAsArray,
    existThisSongInTheCurrentPlaylist,
    updateListOfSongsItemsAfterAnUpdateOrDelete,
    convertInValidSlug,
    convertSlugToText,
    obtenerElementoAleatorio,
    PREFIX_LS,
    createSidePlaylistItem
  } from '@/utils/localStorage';

  let regExP = /^(?![\s0-9\-_])[\w\s\-]{1,20}(?<![\-])$/;
  const $longituMaxOfInput = $('.longitud-max') as HTMLOutputElement;
  const inputAddPlaylist = $('#agregarPlaylistInput') as HTMLInputElement;
  let $output = $('.container-inputs output') as HTMLOutputElement;
  import playlist from '@/data/playlist.json';
  const arrayOfColorsRandoms = playlist.map(el => el.color);
  const arrayOfNameOfColores = playlist.map(el => el.whatColorIs);

  const arrayOfSlugs = playlist.map(el => convertInValidSlug(el.title));
  const randomSlug = obtenerElementoAleatorio(arrayOfSlugs);
  const response = await fetch(`../../data/${randomSlug}.json`);
  const playlistRandomObject = await response.json();
  const arrayOfRandomPosters = playlistRandomObject.map(
    (el: any) => el.urlPoster
  );

  //new
  import { actions } from 'astro:actions';

  function closeModal() {
    const $modal = $('.modal-add-playlists') as HTMLElement;
    if (!$modal) return;
    $modal.classList.remove('modal-open');
  }

  async function addNewPlaylist() {
    const inputValor = inputAddPlaylist.value;

    if (!inputAddPlaylist) return;
    if (regExP.test(inputValor) && inputAddPlaylist.classList.contains('valid')) {
      inputAddPlaylist.value = '';
      $output.value = '0';
      const containerOfPlaylists = $(
        '.container-of-add-to-playlists'
      ) as HTMLElement;
      createPlaylistElement(inputValor);
      createPlaylist(inputValor, JSON.stringify([])); //en el ls

      //New
      const newPlaylist = {
        id_playlist: crypto.randomUUID(),
        title: convertSlugToText(inputValor),
        color: obtenerElementoAleatorio(arrayOfColorsRandoms),
        isPlaylistFavorites: 'FALSE',
        fromUser: 'TRUE',
        id_user: localStorage.getItem('local_id')
      };

      const allPlaylistFromDB = localStorage.getItem('allPlaylistFromDB') ?? '[]';
      const allPlaylistFromDbArray = JSON.parse(allPlaylistFromDB);
      allPlaylistFromDbArray.push(newPlaylist);
      localStorage.setItem(
        'allPlaylistFromDB',
        JSON.stringify(allPlaylistFromDbArray)
      );

      const $tabActive = $('.sidebar-right') as HTMLElement;
      $tabActive.click();
      containerOfPlaylists.scrollTop = containerOfPlaylists.scrollHeight;

      setTimeout(() => {
        const $tabActive = $('.sidebar-left') as HTMLElement;
        $tabActive.click();
      }, 100);

      //@ts-ignore
      const { data, error } = await actions.createNewPlaylistInDb(newPlaylist);

      // (() => {
      //   const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
      //   let originalPlaylist_ = [...$sideBarPlaylist?.children];
      //   const lastElement = originalPlaylist_[originalPlaylist_.length - 1];
      //   const newElement = lastElement.cloneNode(true) as HTMLElement;
      //   let startTabIndex = Number(newElement.getAttribute('tabindex'));

      //   for (const key in localStorage) {
      //     if (key.startsWith(PREFIX_LS)) {
      //       startTabIndex += 1;
      //       const currentPlaylistString = localStorage.getItem(key) ?? '[]';
      //       const currenPlaylistJson = JSON.parse(currentPlaylistString);
      //       const $sideBarPlaylist = $('.sidebarPlaylist') as HTMLElement;
      //       const slug = key.replace(PREFIX_LS, '');
      //       const existAlreadyThisPlaylists = [...$sideBarPlaylist.children].some(
      //         el => {
      //           return el.getAttribute('data-id') === slug;
      //         }
      //       );
      //       //New
      //       const allPlaylistFromDB =
      //         localStorage.getItem('allPlaylistFromDB') ?? '[]';
      //       const allPlaylistFromDbArray = JSON.parse(allPlaylistFromDB);

      //       if (!existAlreadyThisPlaylists) {
      //         const arrayOfPosters = currenPlaylistJson.map(
      //           (el: any) => el.urlPoster
      //         );

      //         const img =
      //           currenPlaylistJson.length > 0
      //             ? obtenerElementoAleatorio(arrayOfPosters)
      //             : obtenerElementoAleatorio(arrayOfRandomPosters);

      //         const title = convertSlugToText(slug);
      //         const someElementWithTheTitle = allPlaylistFromDbArray.find(
      //           (el: any) => el.title === title
      //         );

      //         let theColor = obtenerElementoAleatorio(arrayOfColorsRandoms);

      //         if (someElementWithTheTitle) {
      //           const { color } = someElementWithTheTitle;
      //           theColor = color;
      //         }

      //         createSidePlaylistItem({
      //           tabindex: startTabIndex,
      //           slug,
      //           color: theColor,
      //           poster: img,
      //           title
      //         });
      //       }
      //     }
      //   }
      // })();
    }
  }

  document.addEventListener('click', async e => {
    const target = e.target as HTMLElement;

    if (target.matches('.row')) {
      const playlistEmpty = target.querySelector('.playlistEmpty') as HTMLElement;
      playlistEmpty.classList.toggle('isSavedInPlaylist');

      setTimeout(() => {
        const lastSong = localStorage.getItem(
          'lastPlaylistClickedPreparedToAddANewPlaylist'
        );
        const objectLastSongAdded = { ...JSON.parse(lastSong ?? '{}') };
        const slugName = target.dataset.playlistTitulo;

        //Si guardamos en la  playlists
        if (playlistEmpty.classList.contains('isSavedInPlaylist')) {
          if (existThisSongInTheCurrentPlaylist(slugName, objectLastSongAdded))
            return;
          const playlistNombre = convertSlugToText(slugName);
          const objectLastSongAddedWithAlbumUpdate = {
            ...objectLastSongAdded,
            album: playlistNombre
          };
          addSongInPlaylist(slugName, objectLastSongAddedWithAlbumUpdate);
          const allPlaylistFromDB =
            localStorage.getItem('allPlaylistFromDB') ?? '[]';
          const allPlaylistFromDbArray = JSON.parse(allPlaylistFromDB);

          console.info(objectLastSongAddedWithAlbumUpdate);

          const thePlaylistWithId = allPlaylistFromDbArray.find(
            (el: any) => el.title === playlistNombre
          );

          const { id_playlist } = thePlaylistWithId;

          const { title, album, artist, date, duration, urlSong, urlPoster } =
            objectLastSongAddedWithAlbumUpdate;

          updateListOfSongsItemsAfterAnUpdateOrDelete();

          setTimeout(() => {
            (async () => {
              try {
                const { data, error } = await actions.insertNewSongInDb({
                  title,
                  artist,
                  album,
                  date,
                  duration,
                  urlSong,
                  urlPoster
                });

                if (error) {
                  console.error('Error al insertar nueva canción:', error);
                  return;
                }

                const { data: datita, error: errorcito } =
                  await actions.insertDataIntoPlaylistsSong({
                    title,
                    artist,
                    id_playlist,
                    album
                  });

                if (errorcito) {
                  console.error(
                    'Error al insertar canción en la playlist:',
                    errorcito
                  );
                  return;
                }

                console.log(
                  'Canción insertada correctamente en la base de datos y en la playlist.'
                );
              } catch (err) {
                console.error('Error inesperado:', err);
              }
            })();
          }, 30);

          return;
        }

        //Si quitamos de la playlist
        const currentSongHasTitleGreen =
          localStorage.getItem('thisSongIsCurrentlyInReproduction') === 'true';

        if (currentSongHasTitleGreen) {
          localStorage.setItem('the-song-item-deletes-itself', `${true}`);
        }

        removeSongFromPlaylist(slugName, objectLastSongAdded);
        updateListOfSongsItemsAfterAnUpdateOrDelete();
        localStorage.setItem('thisSongIsCurrentlyInReproduction', 'false');

        const playlistNombre = convertSlugToText(slugName);
        const allPlaylistFromDB =
          localStorage.getItem('allPlaylistFromDB') ?? '[]';
        const allPlaylistFromDbArray = JSON.parse(allPlaylistFromDB);

        const thePlaylistWithId = allPlaylistFromDbArray.find(
          (el: any) => el.title === playlistNombre
        );

        const { id_playlist } = thePlaylistWithId;

        (async () => {
          try {
            const { data, error: err } = await actions.deleteSongFromThePlaylist({
              ...objectLastSongAdded,
              id_playlist
            });
            console.log('Eliminacion exitosa');
          } catch (err) {
            console.error('Error inesperado:', err);
          }
        })();
      }, 150);

      return;
    }

    if (
      target.matches('.btn-add-playlist') ||
      target.matches('.btn-add-playlist *')
    ) {
      addNewPlaylist();
      return;
    }

    if (
      target.matches('.modal-add-playlists') ||
      target.matches('.close-modal-playlist')
    ) {
      closeModal();
      return;
    }
  });

  document.addEventListener('keydown', e => {
    const { key } = e;
    const target = e.target as HTMLInputElement;
    if (target.matches('#agregarPlaylistInput')) {
      if (key === 'Enter') {
        addNewPlaylist();
        const buttonSubmit = $('.btn-add-playlist') as HTMLButtonElement;
        buttonSubmit.classList.toggle('to-bottom', true);

        setTimeout(() => {
          buttonSubmit.classList.remove('to-bottom');
        }, 250);
      }
    }

    if (key === 'Escape') {
      closeModal();
    }
  });

  document.addEventListener('input', e => {
    const target = e.target as HTMLInputElement;
    if (target.matches('#agregarPlaylistInput')) {
      $output.innerHTML = `${target.value.length}`;

      if (target.value.length === 0) {
        target.classList.remove('valid');
        target.classList.remove('invalid');
        $longituMaxOfInput.classList.remove('valid');
        $longituMaxOfInput.classList.remove('invalid');
        return;
      }

      if (
        regExP.test(target.value) &&
        !existsPlaylist(convertInValidSlug(target.value))
      ) {
        target.classList.remove('invalid');
        target.classList.add('valid');
        $longituMaxOfInput.classList.remove('invalid');
        $longituMaxOfInput.classList.add('valid');
      } else {
        target.classList.remove('valid');
        target.classList.add('invalid');
        $longituMaxOfInput.classList.remove('valid');
        $longituMaxOfInput.classList.add('invalid');
      }
    }
  });
</script>
